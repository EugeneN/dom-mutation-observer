// Generated by CoffeeScript 1.6.2
(function() {
  var MutationObserver, debug, dispatch_impl, error, ie_version, info, isDOMAttrModifiedSupported, nullog, observe, observe_dom_added, pubsubhub, root, warn, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  root = window;

  pubsubhub = require('libprotein').pubsubhub;

  dispatch_impl = require('libprotocol').dispatch_impl;

  _ref = dispatch_impl('ILogger', 'MutationObserver'), info = _ref.info, warn = _ref.warn, error = _ref.error, debug = _ref.debug, nullog = _ref.nullog;

  ie_version = function() {
    var myNav;

    myNav = root.navigator.userAgent.toLowerCase();
    if (__indexOf.call(myNav, "msie") >= 0) {
      return parseInt(myNav.split('msie')[1]);
    } else {
      return false;
    }
  };

  MutationObserver = root.MutationObserver || root.WebKitMutationObserver || root.MozMutationObserver;

  isDOMAttrModifiedSupported = (function() {
    var flag, p;

    p = root.document.createElement('p');
    flag = false;
    if (p.addEventListener) {
      p.addEventListener('DOMAttrModified', function() {
        return flag = true;
      }, false);
    } else if (p.attachEvent) {
      p.attachEvent('onDOMAttrModified', function() {
        return flag = true;
      });
    } else {
      return false;
    }
    p.setAttribute('id', 'target');
    return flag;
  })();

  observe = function(node, opts, handler) {
    var observer;

    if (MutationObserver) {
      observer = new MutationObserver(function(mutations) {
        return mutations.map(function(e) {
          return handler(e.target, e.attributeName);
        });
      });
      return observer.observe(node, {
        attributes: true,
        subtree: opts.subtree
      });
    } else if (isDOMAttrModifiedSupported) {
      return node.addEventListener("DOMAttrModified", function(e) {
        return handler(this, e.attrName);
      });
    } else if (__indexOf.call(root.document.body, 'onpropertychange') >= 0) {
      return node.onpropertychange(function(e) {
        return handler(this, root.event.propertyName);
      });
    } else {
      throw "DOM Mutation Observer not available";
    }
  };

  observe_dom_added = function(root_node, cont) {
    var dom_parser, e, get_wrapper, is_ie, patch, pub, sub, _ref1;

    is_ie = ie_version();
    if (is_ie && is_ie < 9) {
      _ref1 = pubsubhub(), pub = _ref1.pub, sub = _ref1.sub;
      get_wrapper = function(orig_fn_name) {
        return function() {
          var args, ret;

          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          ret = this[orig_fn_name].apply(this, args);
          debug.apply(null, ["Patched call: " + orig_fn_name + " with args:"].concat(__slice.call(args)));
          setTimeout(function() {
            return pub.apply(null, ['node_changed'].concat(__slice.call(args)));
          }, 0);
          return ret;
        };
      };
      patch = function(o, fn_name) {
        var orig_fn_name;

        orig_fn_name = '_' + fn_name;
        o.prototype[orig_fn_name] = o.prototype[fn_name];
        return o.prototype[fn_name] = get_wrapper(orig_fn_name);
      };
      try {
        ['appendChild', 'insertChild', 'replaceChild', 'cloneNode', 'insertBefore'].map(function(fn_name) {
          return patch(Element, fn_name);
        });
      } catch (_error) {
        e = _error;
        error("Can't init dom observer, don't use IE7");
      }
      return sub('node_changed', function() {
        var node, _arg;

        _arg = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        node = _arg[0];
        return cont(node);
      });
    } else {
      dom_parser = dispatch_impl('IDom', root_node);
      return dom_parser.add_event_listener("DOMNodeInserted", function(event) {
        return cont(event.target);
      });
    }
  };

  module.exports = {
    observe: observe,
    observe_dom_added: observe_dom_added
  };

}).call(this);
